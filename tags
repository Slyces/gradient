!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
args	gradient.py	/^    args = parser.parse_args()$/;"	v
baeleFunction	Main.py	/^def baeleFunction(liste):$/;"	f
batchGradientDescent	Main.py	/^def batchGradientDescent(function, dimension, xInit, learningRate, maxIter=10000):$/;"	f
boothFunction	Main.py	/^def boothFunction(liste):$/;"	f
data	gradient.py	/^            data = [(x_i, y_j) for x_i in x for y_j in y]$/;"	v
def_space	gradient.py	/^    def_space = globals()["def_space_" + args.function]$/;"	v
def_space_sin2d	gradient.py	/^def_space_sin2d = [[-5, 5], [-5, 5]]$/;"	v
def_space_square	gradient.py	/^def_space_square = [[-10, 0]]$/;"	v
default	gradient.py	/^    default = '[default: %(default)s]' # message for default values$/;"	v
descent	gradient.py	/^    descent = gradient_descent$/;"	v
dest	gradient.py	/^                dest="verbose"$/;"	v
f_sin2d	gradient.py	/^def f_sin2d(x, y):$/;"	f
f_square	gradient.py	/^def f_square(x):$/;"	f
formatter_class	gradient.py	/^            formatter_class=argparse.RawDescriptionHelpFormatter,$/;"	v
function	gradient.py	/^    function = globals()["f_" + args.function]$/;"	v
functions	gradient.py	/^functions = ['square', 'sin2d']$/;"	v
grad_sin2d	gradient.py	/^def grad_sin2d(x, y):$/;"	f
grad_square	gradient.py	/^def grad_square(x):$/;"	f
gradient	gradient.py	/^    gradient = globals()["grad_" + args.function]$/;"	v
gradient_descent	gradient.py	/^def gradient_descent(x_0, f, grad):$/;"	f
help	gradient.py	/^                help="incremental verbosity, can be repeated",$/;"	v
momentumGradientDescent	Main.py	/^def momentumGradientDescent(function, dimension, xInit, learningRate, gamma=0.9, maxIter=10000):$/;"	f
n	gradient.py	/^            n= len(values), x= values[-1], y= function(values[-1])$/;"	v
parser	gradient.py	/^    parser = argparse.ArgumentParser(prog='gradient',$/;"	v
starting_point	gradient.py	/^def starting_point(def_space):$/;"	f
stochastiqueGradientDescent	Main.py	/^def stochastiqueGradientDescent(function, dimension, xInit, learningRate, maxIter=10000):$/;"	f
title	gradient.py	/^                    title='{} function'.format(args.function))$/;"	v
values	gradient.py	/^    values = gradient_descent(*x_0, function, gradient)$/;"	v
verbose	gradient.py	/^    verbose = args.verbose$/;"	v
vprint	gradient.py	/^def vprint(*args, v = 1):$/;"	f
x	gradient.py	/^            x = np.linspace(*def_space[0], num=100)$/;"	v
x_0	gradient.py	/^    x_0 = starting_point(def_space)$/;"	v
y	gradient.py	/^            y = [function(x_i) for x_i in x]$/;"	v
y	gradient.py	/^            y = np.linspace(*def_space[1], num=100)$/;"	v
